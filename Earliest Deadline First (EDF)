// Earliest Deadline First (EDF)



#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int id;
    int arrival;
    int burst;
    int deadline;
    int remaining;
} Process;


int compare(const void *a, const void *b) {
    Process *p1 = (Process *)a;
    Process *p2 = (Process *)b;
    return p1->deadline - p2->deadline;
}


void EDF_Scheduling(Process processes[], int n) {
    int time = 0;
    int completed = 0;


    qsort(processes, n, sizeof(Process), compare);

    printf("Process Scheduling Order (Earliest Deadline First):\n");


    while (completed < n) {

        for (int i = 0; i < n; i++) {
            if (processes[i].arrival <= time && processes[i].remaining > 0) {
                printf("At time %d: Process %d is running (Deadline: %d)\n", time, processes[i].id, processes[i].deadline);
                processes[i].remaining--;
                if (processes[i].remaining == 0) {
                    completed++;
                }
                time++;
                break;
            }
        }
    }
}

int main() {
    int n;


    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[n];


    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("\nEnter details for Process %d:\n", i + 1);
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrival);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst);
        printf("Deadline: ");
        scanf("%d", &processes[i].deadline);
        processes[i].remaining = processes[i].burst;
    }


    EDF_Scheduling(processes, n);

    return 0;
}
